# -*- coding: utf-8 -*-
"""Spam filter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HvvUXt3pDABhB_7tSkZ0T0GppqoFJyF-
"""

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Step 2: Load the dataset
# Assuming the dataset is a CSV file named 'climate_data.csv'
df = pd.read_csv('/content/project6.csv', parse_dates=['DATE'])
print(df.head(5))

# Step 3: Data Preprocessing
# Set the date column as the index
df.set_index('DATE', inplace=True)

# Handling missing values
df.fillna(method='ffill', inplace=True)

#Step 4: Exploratory Data Analysis (EDA)
# Plotting the monthly mean temperature
plt.figure(figsize=(14, 7))
df['MonthlyMeanTemperature'].plot()
plt.title('Monthly Mean Temperature Over Time')
plt.xlabel('Date')
plt.ylabel('Temperature (F)')
plt.show()

# Plotting the monthly total liquid precipitation
plt.figure(figsize=(14, 7))
df['MonthlyTotalLiquidPrecipitation'].plot()
plt.title('Monthly Total Liquid Precipitation Over Time')
plt.xlabel('Date')
plt.ylabel('Precipitation (inches)')
plt.show()

# Step 5: Time Series Analysis
# Decomposing the time series for monthly mean temperature
decomposition = seasonal_decompose(df['MonthlyMeanTemperature'], model='multiplicative', period=12)
fig = decomposition.plot()
plt.show()

# Step 5: Time Series Analysis
!pip install statsmodels
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.seasonal import seasonal_decompose

# ... (previous code)

# Splitting the data into train and test sets
train_size = int(len(df) * 0.8)  # Use 80% of data for training
train, test = df['MonthlyMeanTemperature'][:train_size], df['MonthlyMeanTemperature'][train_size:]

# Fitting the ARIMA model
model = ARIMA(train, order=(5, 1, 0))
model_fit = model.fit()
print(model_fit.summary())

# Fitting the ARIMA model
model = ARIMA(train, order=(5, 1, 0))
model_fit = model.fit()
print(model_fit.summary())

# Making predictions
predictions = model_fit.forecast(steps=len(test))
plt.figure(figsize=(12, 6))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(test.index, predictions, label='Predictions')
plt.legend(loc='best')
plt.title('Monthly Mean Temperature Prediction')
plt.show()

# Step 7: Evaluate the model
mse = mean_squared_error(test, predictions)
print(f'Mean Squared Error: {mse}')